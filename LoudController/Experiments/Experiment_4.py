# This experiment is designed to test the ⁠LoudScheduler under high-throughput conditions to saturate the cluster. 
# It systematically increases the maximum throughput generated by the ⁠LoudGenerator and runs a number 
# of scenarios for each throughput level, testing both prediction and profiling modes of the ⁠LoudScheduler.

import helper
import os
import re
import math
import time

def set_max_throughput(throughput):
    """
    Modifies the max_overall_throughput in the LoudGenerator.py file.
    """
    filepath = 'LoudController/LoudGenerator/LoudGenerator.py'
    with open(filepath, 'r') as file:
        lines = file.readlines()

    with open(filepath, 'w') as file:
        for line in lines:
            if re.match(r'^    max_overall_throughput =', line):
                file.write(f'    max_overall_throughput = {throughput}\n')
            else:
                file.write(line)

def main():
    """
    Main function to run Experiment 4.
    This experiment tests the LoudScheduler under increasingly high throughputs
    to observe its saturation point and performance under stress.
    """
    throughputs = [40, 50, 60, 70, 80]
    num_scenarios = 5
    scenario_duration = 5 + 2 + 1  # 8 minutes per scenario run
    scheduler_configs_to_be_tested = 2 # pred and prof
    
    estimated_time = math.ceil((len(throughputs) * num_scenarios * scenario_duration * scheduler_configs_to_be_tested) / 60 * 1.1)
    print(f"Estimated time: {estimated_time} hours. End time: {time.ctime(time.time() + estimated_time * 3600)}")
    if input("Proceed? (y/n)") != 'y':
        exit()

    for throughput in throughputs:
        print(f"--- Testing with max throughput: {throughput} ---")
        set_max_throughput(throughput)
        
        for i in range(num_scenarios):
            scenario_id = f"t{throughput}_s{i}"
            print(f"--- Scenario {i+1}/{num_scenarios} for throughput {throughput} ---")
            
            helper.generate_scenario()

            # LoudScheduler with prediction
            print(f"Running scenario {scenario_id} on LoudScheduler with prediction")
            helper.enable_prediction()
            helper.experiment('loud', f'loud_pred_throughput_{throughput}', scenario_id)

            # LoudScheduler with profiling
            print(f"Running scenario {scenario_id} on LoudScheduler with profiling")
            helper.disable_prediction()
            helper.experiment('loud', f'loud_prof_throughput_{throughput}', scenario_id)

            helper.archive_scenario(scenario_id)

if __name__ == '__main__':
    main()
