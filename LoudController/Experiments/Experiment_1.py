# This is an experiment to test the LoudScheduler against the RoundRobinScheduler and RandomScheduler. The experiment will run the LoudController with each scheduler and compare the results.
# We will use the simulated workload from LoudGenerator.py to test the schedulers.
# The outline of the experiment is as follows:
# 1. Empty the request_log.csv and LoudController.log files if they exist.
# 2. Start the LoudController with the LoudScheduler.
# 3. Start collecting data on the workers (Temperature, Power).
# 4. Start Simulate_Workload.py to generate requests.
# 5. Wait for the requests to finish processing.
# 6. Stop the LoudController.
# 7. Stop collecting data on the workers.
# 8. Repeat steps 1-8 for the 
#                               i.TransparentScheduler (Race to idle), 
#                              ii.IntervalScheduler (0.2, 0.5, 1) and 
#                             iii.FixedBatchScheduler (8, 16, 32)
# 9. We will run 7 different scenarios generated by the LoudGenerator.py script.
# 10. We also have to see the difference between prediction and profiling.

import helper

scenarios = 7


def main():
    for scenario in range(scenarios):

        # Generate scenario
        scenario_generation = helper.generate_scenario()
        scenario_generation.wait()

        # LoudScheduler with prediction
        helper.enable_prediction()
        helper.experiment('loud', 'loud_pred', scenario)

        # LoudScheduler with profiling
        helper.disable_prediction()
        helper.experiment('loud', 'loud_prof', scenario)

        # TransparentScheduler
        helper.experiment('transparent', 'transparent', scenario)

        # IntervalScheduler
        for interval in [0.2, 0.5, 1]:
            helper.set_batching_interval(interval)
            helper.experiment(f'interval', f'interval_{interval}', scenario)

        # FixedBatchScheduler
        for batch_size in [8, 16, 32]:
            helper.set_fixed_batch_size(batch_size)
            helper.experiment(f'fixed_batch', f'fixed_batch_{batch_size}', scenario)
        
if __name__ == '__main__':
    main()
